{"version":3,"file":"selection.min.js","sources":["../src/selection.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript code for the wordselect question type.\n *\n * @copyright  2016 Marcus Green\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(function() {\n  /**\n   * Initialise the quesiton instance with a unique id\n   * Necessary where there is more than one of this\n   * type of question per page.\n   * @param {int} questionId\n   */\n  function WordSelectQuestion(questionId) {\n    const questionElement = document.getElementById(questionId);\n    const selectables = questionElement.querySelectorAll(\".selectable\");\n\n    selectables.forEach((selectable) => {\n      selectable.addEventListener(\"keydown\", (e) => {\n        if (e.key === \" \") {\n          toggleSelection(selectable);\n          e.preventDefault();\n          return false;\n        }\n        return true;\n      });\n\n      selectable.addEventListener(\"click\", () => {\n        toggleSelection(selectable);\n      });\n    });\n  }\n\n  /**\n   * Toggle a word (or collection of word)\n   * As selected/unselected.\n   * @param {string} selection\n   */\n  function toggleSelection(selection) {\n\n    var isSelected = selection.classList.contains('selected');\n    var hidden = document.getElementById(selection.id);\n    if (hidden === null || hidden.disabled === true) {\n      return;\n    }\n    if (isSelected === true) {\n      selection.classList.remove('selected');\n      selection.removeAttribute('title');\n      selection.setAttribute('aria-checked', 'false');\n      /* Convert type to text, because\n      * unchecked textboxes would not\n      * be included in the response\n      */\n      hidden.type = 'text';\n      hidden.style.visibility = 'hidden';\n      hidden.style.display = 'none';\n      hidden.value = '';\n    } else {\n      selection.className += ' selected';\n      selection.title = 'selected';\n      selection.setAttribute('aria-checked', 'true');\n      hidden.type = 'checkbox';\n      hidden.value = 'on';\n      hidden.checked = 'true';\n    }\n  }\n\n  return {\n    init: function(questionId) {\n      new WordSelectQuestion(questionId);\n    },\n  };\n});\n"],"names":["define","WordSelectQuestion","questionId","document","getElementById","querySelectorAll","forEach","selectable","addEventListener","e","key","toggleSelection","preventDefault","selection","isSelected","classList","contains","hidden","id","disabled","remove","removeAttribute","setAttribute","type","style","visibility","display","value","className","title","checked","init"],"mappings":";;;;;;AAsBAA,qCAAO,oBAOIC,mBAAmBC,YACFC,SAASC,eAAeF,YACZG,iBAAiB,eAEzCC,SAASC,aACnBA,WAAWC,iBAAiB,WAAYC,GACxB,MAAVA,EAAEC,MACJC,gBAAgBJ,YAChBE,EAAEG,kBACK,KAKXL,WAAWC,iBAAiB,SAAS,KACnCG,gBAAgBJ,2BAUbI,gBAAgBE,eAEnBC,WAAaD,UAAUE,UAAUC,SAAS,YAC1CC,OAASd,SAASC,eAAeS,UAAUK,IAChC,OAAXD,SAAuC,IAApBA,OAAOE,YAGX,IAAfL,YACFD,UAAUE,UAAUK,OAAO,YAC3BP,UAAUQ,gBAAgB,SAC1BR,UAAUS,aAAa,eAAgB,SAKvCL,OAAOM,KAAO,OACdN,OAAOO,MAAMC,WAAa,SAC1BR,OAAOO,MAAME,QAAU,OACvBT,OAAOU,MAAQ,KAEfd,UAAUe,WAAa,YACvBf,UAAUgB,MAAQ,WAClBhB,UAAUS,aAAa,eAAgB,QACvCL,OAAOM,KAAO,WACdN,OAAOU,MAAQ,KACfV,OAAOa,QAAU,eAId,CACLC,KAAM,SAAS7B,gBACTD,mBAAmBC"}